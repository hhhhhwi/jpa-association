package persistence.entity;

import database.DatabaseServer;
import database.H2;
import domain.Order;
import domain.OrderItem;
import domain.Person;
import jakarta.persistence.EntityNotFoundException;
import jdbc.JdbcTemplate;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.sql.ddl.H2DdlQueryBuilder;
import persistence.sql.metadata.EntityMetadata;

import java.sql.SQLException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class SimpleEntityManagerTest {
    private final static Person person = new Person("name", 1, "test@email.com", 1);

    public static EntityManager personManager;

    public static EntityManager orderManager;

    @BeforeAll
    static void setJdbcTemplate() throws SQLException {
        DatabaseServer server = new H2();
        server.start();

        JdbcTemplate jdbcTemplate = new JdbcTemplate(server.getConnection());

        H2DdlQueryBuilder ddlQueryBuilder = new H2DdlQueryBuilder();

        EntityMetadata personMetadata = new EntityMetadata(Person.class);
        EntityMetadata orderMetadata = new EntityMetadata(Order.class);
        EntityMetadata orderItemMetadata = new EntityMetadata(OrderItem.class);

        jdbcTemplate.execute(ddlQueryBuilder.dropQuery(personMetadata));
        jdbcTemplate.execute(ddlQueryBuilder.createQuery(personMetadata));
        jdbcTemplate.execute(ddlQueryBuilder.dropQuery(orderMetadata));
        jdbcTemplate.execute(ddlQueryBuilder.createQuery(orderMetadata));
        jdbcTemplate.execute(ddlQueryBuilder.dropQuery(orderItemMetadata));
        jdbcTemplate.execute("CREATE TABLE order_items(id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, product VARCHAR(255), quantity INTEGER, order_id BIGINT);");
        jdbcTemplate.execute("INSERT INTO orders (orderNumber) VALUES ('on1')");
        jdbcTemplate.execute("INSERT INTO order_items (product, quantity, order_id) VALUES('book', 2, 1)");
        jdbcTemplate.execute("INSERT INTO order_items (product, quantity, order_id) VALUES('pen', 1, 1)");

        PersistenceContext persistenceContext = new SimplePersistenceContext();
        personManager = new SimpleEntityManager(jdbcTemplate, Person.class, persistenceContext);
        orderManager = new SimpleEntityManager(jdbcTemplate, Order.class, persistenceContext);
        personManager.persist(new Person("hhhhhwi", 1, "aab555586@gmail.com", 0));
    }

    @DisplayName("EnityManager를 통해 PK 값이 일치하는 Entity를 찾는다.")
    @Test
    void test_find() {
        Person resultPerson = personManager.find(Person.class, 1L);

        assertEquals(new Person(1L, "hhhhhwi",1,"aab555586@gmail.com", 0), resultPerson);
    }

    @DisplayName("EntityManager를 통해 연관관계가 있는 엔티티를 조회한다.")
    @Test
    void test_findEntityWithAssociation() {
        Order resultOrder = orderManager.find(Order.class, 1L);

        assertEquals(resultOrder, new Order(1L, "on1", List.of(new OrderItem(1L, "book", 2), new OrderItem(2L, "pen", 1))));
    }

    @DisplayName("EntityManager를 통해 Entity를 저장한다.")
    @Test
    void test_persist() {
        personManager.persist(person);
        Person resultPerson = personManager.find(Person.class, 2L);

        assertEquals(new Person(2L, "name", 1, "test@email.com", 1), resultPerson);
    }

    @DisplayName("EntityManager를 통해 Entity를 삭제한다.")
    @Test
    void test_remove() {
        personManager.remove(new Person(1L, "hhhhhwi", 1, "aab555586@gmail.com", 0));

        assertThrows(EntityNotFoundException.class,
                () -> personManager.find(Person.class, 1L));
    }
}
